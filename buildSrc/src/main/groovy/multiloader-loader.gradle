plugins {
    id 'multiloader-common'
}

configurations {
    commonJava {
        canBeResolved = true
        canBeConsumed = false
    }
    commonResources {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    compileOnly(project(":common")) {
        capabilities {
            requireCapability "$group:$mod_id"
        }
    }
    commonJava project(path: ":common", configuration: 'commonJava')
    commonResources project(path: ":common", configuration: 'commonResources')
}

tasks.named('compileJava', JavaCompile) {
    dependsOn(configurations.commonJava)
    source(configurations.commonJava)
}

processResources {
    dependsOn(configurations.commonResources)
    from(configurations.commonResources)
}

tasks.named('javadoc', Javadoc).configure {
    dependsOn(configurations.commonJava)
    source(configurations.commonJava)
}

tasks.named('sourcesJar', Jar) {
    dependsOn(configurations.commonJava)
    from(configurations.commonJava)
    dependsOn(configurations.commonResources)
    from(configurations.commonResources)
}

tasks.named("jar", Jar) {
    doLast {
        project.copy { spec ->
            spec.from(archiveFile.get().asFile)
            spec.into(rootProject.layout.projectDirectory.dir("build").asFile)
        }
    }
}

layout.buildDirectory = file("${rootProject.projectDir}/build/${platform}/${project.name}")