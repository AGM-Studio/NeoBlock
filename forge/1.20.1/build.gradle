plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev'
    id 'net.neoforged.moddev.legacyforge'
}

dependencies {
    compileOnly 'org.jetbrains:annotations:26.0.2'

    compileOnly "mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"
    // runtimeOnly "mezz.jei:jei-${minecraft_version}-forge:${jei_version}" // is not working...
}


mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")

    config("${mod_id}.mixins.json")
    config("${mod_id}.forge.mixins.json")
}

neoForge {
    version = "${minecraft_version}-${forge_version}"

    validateAccessTransformers = true

    def at = project(":common").file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers = ["src/main/resources/META-INF/accesstransformer.cfg"]
    }

    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }

    runs {
        configureEach {
            //noinspection GroovyAssignabilityCheck
            systemProperty('neoforge.enabledGameTestNamespaces', mod_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})" // Unify the run config names with fabric

            gameDirectory.set(file("${rootProject.projectDir}/.runs/${project.name}/${it.name}"))
        }
        client {
            client()
        }
        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
        server {
            server()
        }
    }

    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    compileOnly project(":common")
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")
}

tasks.jar {
    finalizedBy(tasks.named('reobfJar'))
    manifest {
        attributes("MixinConfigs": "${mod_id}.mixins.json,${mod_id}.forge.mixins.json")
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }
